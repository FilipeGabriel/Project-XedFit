package com.homework.sbwork.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.homework.sbwork.entities.User;
import com.homework.sbwork.repositories.UserRepository;
import com.homework.sbwork.services.exceptions.DatabaseException;
import com.homework.sbwork.services.exceptions.ResourceNotFoundException;

import jakarta.persistence.EntityNotFoundException;

@Service
public class UserService {
	
	@Autowired
	private UserRepository userRepository;
	
	public List<User> finAll(){
		return userRepository.findAll();
	}
	
	public User findById(Long id) {
		Optional<User> obj = userRepository.findById(id);
		return obj.orElseThrow(() -> new ResourceNotFoundException(id));		//trocar o obj.get() por .orElseThrow que tenta dar o .get(), mas se não tiver o usuário, vai lançar a exceção inserida como expressão lambda.
	}
	
	public User insert(User obj) {
		return userRepository.save(obj);
	}
	
	public void delete(Long id){
	    try {
	        if(!userRepository.existsById(id)) throw new ResourceNotFoundException(id);
	        userRepository.deleteById(id);
	    }catch (ResourceNotFoundException e){
	        throw new ResourceNotFoundException(id);
	    }catch (DataIntegrityViolationException e) {
	    	throw new DatabaseException(e.getMessage());
	    }
	}
	
	public User update(Long id, User obj) {
		try {
			User entity = userRepository.getReferenceById(id);			// getReferenceById(...) instancia um usuário, mas ainda não vai ao banco de dados. Ele deixa o objeto monitorado pelo jpa para trabalhar com ele, e em seguida efetuar alguma operação com banco de dados.
			updateData(entity, obj);
			return userRepository.save(entity);
		}catch (EntityNotFoundException e) {
	    	throw new ResourceNotFoundException(id);
	    }
	}

	private void updateData(User entity, User obj) {
		entity.setName(obj.getName());
		entity.setEmail(obj.getEmail());
		entity.setPhone(obj.getPhone());
	}
	
}
